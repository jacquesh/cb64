#include "catch.hpp"
#include <string_view>
#include <vector>

#define CB64_IMPLEMENTATION
#include "cb64.h"

template<int N>
void test_roundtrip(unsigned char (&input)[N], std::string_view expected_base64)
{
    CAPTURE(expected_base64);

    unsigned char encoded[64] = {};
    size_t encoded_bytes = base64_encode(input, sizeof(input), encoded, sizeof(encoded));
    REQUIRE(encoded_bytes == expected_base64.length());
    REQUIRE(std::string_view((const char*)encoded, encoded_bytes) == expected_base64);

    unsigned char decoded[32] = {};
    size_t decoded_bytes = base64_decode(encoded, encoded_bytes, decoded, sizeof(decoded));
    REQUIRE(decoded_bytes == sizeof(input));
    REQUIRE(std::vector(&decoded[0], &decoded[decoded_bytes]) == std::vector(&input[0], &input[N]));

    // Check the temp buffers have enough space
    static_assert(sizeof(input) < sizeof(decoded), "Not enough space allocated for the decoded buffer");
    static_assert((sizeof(decoded)*4)/3 < sizeof(encoded), "Not enough space allocated for the encoded buffer");
}

TEST_CASE("Empty input produces empty output")
{
    size_t encoded_bytes = base64_encode(nullptr, 0, nullptr, 0);
    REQUIRE(encoded_bytes == 0);

    size_t decoded_bytes = base64_decode(nullptr, 0, nullptr, 0);
    REQUIRE(decoded_bytes == 0);
}

TEST_CASE("Small round-trips")
{
    unsigned char input1[] = {0x3f}; test_roundtrip(input1, "Pw==");
    unsigned char input2[] = {0x3f, 0x2a}; test_roundtrip(input2, "Pyo=");
    unsigned char input3[] = {0x3f, 0x2a, 0x99}; test_roundtrip(input3, "PyqZ");
    unsigned char input4[] = {0x3f, 0x2a, 0x99, 0xca}; test_roundtrip(input4, "PyqZyg==");

    unsigned char input5[] = {0x47, 0xac, 0x8c, 0x50, 0x83}; test_roundtrip(input5, "R6yMUIM=");
    unsigned char input6[] = {0x47, 0xac, 0x8c, 0x50, 0x83, 0x60}; test_roundtrip(input6, "R6yMUINg");
    unsigned char input7[] = {0x47, 0xac, 0x8c, 0x50, 0x83, 0x60, 0x3c}; test_roundtrip(input7, "R6yMUINgPA==");
    unsigned char input8[] = {0x47, 0xac, 0x8c, 0x50, 0x83, 0x60, 0x3c, 0x6a}; test_roundtrip(input8, "R6yMUINgPGo=");
    unsigned char input9[] = {0x47, 0xac, 0x8c, 0x50, 0x83, 0x60, 0x3c, 0x6a, 0x7f}; test_roundtrip(input9, "R6yMUINgPGp/");
    unsigned char input10[]= {0x47, 0xac, 0x8c, 0x50, 0x83, 0x60, 0x3c, 0x6a, 0x7f, 0xed}; test_roundtrip(input10, "R6yMUINgPGp/7Q==");
}

TEST_CASE("16-byte round-trip")
{
    unsigned char input[] = {0xce, 0x45, 0x92, 0xf2, 0x02, 0x91, 0x2f, 0x93, 0xa4, 0x40, 0x3f, 0x71, 0x90, 0xc6, 0xb6, 0x0d};
    test_roundtrip(input, "zkWS8gKRL5OkQD9xkMa2DQ==");
}

TEST_CASE("1 byte with zero low nibble encodes with 2 trail equals")
{
    unsigned char input[] = {0xf0};
    test_roundtrip(input, "8A==");
}

TEST_CASE("Very long strings encode & decode correctly")
{
    unsigned char input[] = {
        0x3c, 0x37, 0xd5, 0xfe, 0xe3, 0x6b, 0xea, 0x92, 0x2d, 0xb7, 0x31, 0x55, 0xc2, 0xbe, 0xe6, 0xd4, 0x6d, 0x2d, 0x08, 0x7b, 0xb9, 0x34, 0xf1, 0x6d, 0x39, 0xc7, 0xcf, 0x7a, 0xd7, 0x07, 0xb5, 0x7e,
        0x05, 0xfe, 0x97, 0x11, 0x5f, 0x9a, 0x3b, 0xc9, 0xfb, 0x59, 0x92, 0x35, 0xa0, 0x69, 0x1d, 0x8f, 0x83, 0x3e, 0x30, 0x68, 0x4f, 0xb7, 0xce, 0xb1, 0xbd, 0xa5, 0xe6, 0x80, 0xcd, 0xb2, 0xc4, 0x49,
        0xe4, 0xa9, 0x9c, 0x8d, 0xcb, 0x22, 0xea, 0xdb, 0xf2, 0xd8, 0x09, 0xc0, 0x25, 0x2b, 0xcf, 0x72, 0x7b, 0x30, 0xec, 0x38, 0x78, 0xcf, 0x1c, 0x3b, 0xed, 0x24, 0x97, 0xde, 0x80, 0x74, 0xa7, 0xe3,
        0xc3, 0xfc, 0x4d, 0x1a, 0x14, 0xb0, 0xba, 0x56, 0xa9, 0xc6, 0xad, 0x1d, 0x8e, 0x6e, 0x11, 0xc4, 0x64, 0xdf, 0x90, 0x52, 0x7e, 0x4a, 0xf9, 0x9f, 0xce, 0x75, 0x66, 0x4d, 0xe1, 0x2f, 0xa1, 0x41,
        0x58, 0xa9, 0xe5, 0xea, 0xf5, 0x63, 0xc0, 0x15, 0xb9, 0xad, 0x4f, 0xa8, 0xe8, 0x07, 0x90, 0x9c, 0x60, 0xe7, 0x18, 0x35, 0x9d, 0x30, 0x17, 0x2a, 0xd6, 0x02, 0x56, 0x76, 0x32, 0x7e, 0x12, 0x4b,
        0x2b, 0x59, 0xf2, 0xfa, 0x5d, 0x98, 0x2f, 0x2d, 0x61, 0xc5, 0x80, 0xb1, 0xe9, 0xeb, 0x2f, 0xa7, 0x47, 0xb8, 0x4d, 0x8b, 0x2a, 0xb4, 0x89, 0x1f, 0x3f, 0x75, 0x64, 0xaf, 0x26, 0x46, 0xad, 0x6e,
        0x23, 0x81, 0x72, 0x15, 0xf9, 0xa9, 0x58, 0x20, 0xf9, 0x78, 0x05, 0xae, 0x1f, 0x3f, 0x6e, 0x62, 0xc5, 0xd5, 0x75, 0xe6, 0xed, 0xb6, 0x9b, 0x49, 0x44, 0x9b, 0x10, 0xcf, 0xea, 0x36, 0xf2, 0xff,
        0xe3, 0xda, 0x22, 0x1f, 0xa7, 0x76, 0x7e, 0x48, 0x32, 0x5c, 0x33, 0xf6, 0xac, 0xa4, 0x0f, 0xa5, 0x79, 0x44, 0xa3, 0x8c, 0xe4, 0x26, 0x56, 0xe8, 0xa6, 0x5a, 0xa3, 0xda, 0xf1, 0xd4, 0x98, 0x60,
        0x9e, 0x07, 0x53, 0x3b, 0xd9, 0x71, 0x36, 0x49, 0x18, 0xc1, 0xa0, 0xa3, 0x2b, 0x87, 0x8d, 0xa9, 0x63, 0x3a, 0xcc, 0x9b, 0xae, 0x40, 0x40, 0xf6, 0xd3, 0x1c, 0xec, 0x4f, 0x70, 0x5e, 0xb5, 0x7e,
        0x90, 0xc2, 0xfa, 0xa6, 0x07, 0xd0, 0x3f, 0xc1, 0xa9, 0x0d, 0xca, 0x8b, 0xe6, 0xe2, 0x6d, 0x02, 0xee, 0xec, 0xd6, 0x53, 0x2a, 0x6c, 0x95, 0x4a, 0x60, 0x82, 0x88, 0xcb, 0x80, 0xbd, 0xa8, 0x1b,
        0x13, 0xb3, 0xb7, 0xec, 0x2c, 0xe8, 0x0d, 0x84, 0xe9, 0x1b, 0xdc, 0x4f, 0x7f, 0xe8, 0x6f, 0x21, 0x53, 0xb6, 0x50, 0xa4, 0xaf, 0xf3, 0xc6, 0xe0, 0xb5, 0xc5, 0xa9, 0xf0, 0x34, 0x41, 0x24, 0xe9,
        0x66, 0x11, 0x8a, 0xc7, 0xfb, 0x0e, 0x5b, 0xa0, 0xb6, 0x91, 0xc2, 0x4f, 0xdd, 0x48, 0x17, 0x51, 0x25, 0x09, 0xe6, 0x44, 0xa1, 0xa9, 0xae, 0xe8, 0x64, 0xef, 0xf2, 0xd3, 0x83, 0x60, 0x88, 0x64,
        0x74, 0x51, 0xcb, 0xd9, 0x11, 0xce, 0x58, 0xa9, 0xee, 0x42, 0xf1, 0x72, 0x76, 0xfe, 0xc1, 0xfe, 0x8a, 0x12, 0xd3, 0xf2, 0xd8, 0xe6, 0xf5, 0xcd, 0x49, 0x49, 0x87, 0x4b, 0x82, 0x02, 0xf0, 0x1c,
        0x07, 0xf5, 0xdc, 0xd2, 0x4f, 0x6d, 0x1e, 0x9e, 0xb0, 0x5d, 0x4a, 0x84, 0x2d, 0x75, 0xe4, 0x14, 0x43, 0x5f, 0x01, 0x2d, 0x25, 0x98, 0xf6, 0xf8, 0x26, 0x74, 0x6f, 0x02, 0x7e, 0xe3, 0x62, 0x1e,
        0x95, 0xed, 0xe8, 0x46, 0x6b, 0x6b, 0xc1, 0x8d, 0xfb, 0x48, 0xd6, 0x02, 0x4a, 0x28, 0x54, 0x57, 0x26, 0x18, 0x0c, 0xaf, 0x88, 0x39, 0x85, 0xd7, 0x93, 0x4e, 0x58, 0xdf, 0xe4, 0x74, 0xf9, 0x5f,
        0xac, 0x7d, 0xe6, 0x7e, 0xe3, 0xe0, 0x19, 0xba, 0x5c, 0x2e, 0xf9, 0x82, 0x5a, 0x7b, 0xbb, 0xd5, 0xf7, 0x33, 0xa9, 0x97, 0x97, 0xb2, 0xa2, 0x24, 0xcf, 0x5a, 0x75, 0x9d, 0xa7, 0xfc, 0x45, 0x46,
        0x80, 0x43, 0x3f, 0x33, 0x05, 0xc9, 0x4b, 0xed, 0x73, 0x1f, 0x1c, 0x35, 0xcd, 0x2a, 0xdd, 0x64, 0xc7, 0x13, 0xb3, 0x65, 0x3a, 0xa2, 0xf4, 0xdb, 0x9a, 0x4e, 0xc9, 0x31, 0x0e, 0xcb, 0xb4, 0xe4,
        0x9d, 0xf3, 0xac, 0xe4, 0x08, 0x93, 0xa7, 0xe4, 0xb1, 0x94, 0x39, 0x7c, 0x49, 0x1b, 0x98, 0x02, 0x03, 0x42, 0x18, 0xc3, 0xc2, 0x4d, 0x23, 0x53, 0x01, 0x5c, 0x4f, 0xe4, 0x88, 0xb1, 0x6e, 0x27,
        0x5a, 0x0f, 0xa3, 0xd9, 0xae, 0x61, 0x51, 0x10, 0x7f, 0x2d, 0x79, 0x5f, 0xf3, 0xeb, 0x80, 0x0c, 0xdc, 0x6a, 0x89, 0xd7, 0x4e, 0xf3, 0xb7, 0x33, 0x88, 0x91, 0xf8, 0x5d, 0x2d, 0xb9, 0xcf, 0x81,
        0x26, 0xd7, 0x45, 0x55, 0x58, 0x8f, 0xb3, 0x64, 0x9a, 0x3f, 0xe1, 0x05, 0xec, 0x01, 0xec, 0x6c, 0xbc, 0x65, 0x0a, 0x73, 0x46, 0x9c, 0x93, 0x17, 0x17, 0xce, 0xd8, 0x05, 0xa4, 0x0c, 0x4c, 0xfd,
        0x52, 0xb1, 0x37, 0x93, 0xfb, 0xb8, 0x59, 0xaf, 0xd1, 0xa1, 0xb3, 0xad, 0x58, 0x39, 0xf0, 0x12, 0x8c, 0x95, 0xc1, 0x46, 0x61, 0x90, 0x80, 0x84, 0x29, 0x13, 0x33, 0xcc, 0x13, 0x7f, 0x6a, 0x08,
        0x5f, 0x91, 0x5f, 0xe3, 0x25, 0x94, 0x03, 0xe9, 0xa9, 0xef, 0xd9, 0xb1, 0xfb, 0x26, 0x3a, 0xc8, 0x37, 0x03, 0x1f, 0xd9, 0x36, 0xf5, 0xc2, 0xbe, 0x44, 0x61, 0x72, 0x9c, 0xf9, 0x44, 0x4b, 0xa7,
        0xd5, 0x23, 0x6e, 0xe1, 0x23, 0x36, 0x1a, 0xb4, 0xc2, 0x61, 0x8b, 0x36, 0xe6, 0xf8, 0xa0, 0xfe, 0xce, 0x94, 0xf8, 0xbc, 0x99, 0x3b, 0x37, 0x7d, 0x73, 0x62, 0x18, 0x67, 0x3e, 0x36, 0xa6, 0x83,
        0xe9, 0xa5, 0x97, 0xa3, 0xa2, 0xe2, 0x62, 0xbd, 0x35, 0xcb, 0x78, 0x7f, 0x99, 0xbb, 0xa7, 0x44, 0x4c, 0x5a, 0xde, 0x3f, 0x8e, 0xa0, 0xcd, 0xbe, 0xfd, 0xba, 0x0b, 0x0a, 0xa4, 0x45, 0x39, 0xd2,
        0xce, 0x5d, 0x27, 0x7a, 0x0d, 0x1b, 0xf0, 0x9c, 0xdc, 0x43, 0xd9, 0xdc, 0x8d, 0x6a, 0x5d, 0x7b, 0x75, 0x43, 0x07, 0x06, 0xa5, 0xf2, 0xff, 0x7e, 0x30, 0x16, 0x1d, 0xa1, 0xc8, 0x3b, 0xc5, 0x7b,
        0x12, 0xe0, 0xdf, 0xfa, 0xac, 0xe1, 0x5a, 0x79, 0x18, 0x09, 0x5e, 0x5a, 0x33, 0x03, 0x23, 0xc4, 0xf3, 0x04, 0x65, 0x2e, 0xf3, 0xef, 0x8e, 0x39, 0xed, 0xd8, 0xd4, 0xee, 0x62, 0x73, 0x08, 0x9f,
        0x8f, 0x05, 0x30, 0x8c, 0x00, 0xa7, 0x80, 0x14, 0x34, 0xb1, 0x8c, 0x93, 0x30, 0x75, 0x44, 0x85, 0x1f, 0x2c, 0x8b, 0xc1, 0x7d, 0x22, 0x89, 0xf6, 0x56, 0x7b, 0x98, 0xa8, 0x11, 0xef, 0xae, 0x8a,
        0xe8, 0xd8, 0x7c, 0x3d, 0xa6, 0x9d, 0x54, 0xf0, 0x9c, 0xaa, 0xc9, 0x2c, 0xd9, 0xca, 0x2e, 0x80, 0xb2, 0x65, 0xbf, 0xee, 0x9e, 0xcb, 0xf8, 0x82, 0x28, 0x8f, 0x76, 0xfc, 0xeb, 0x9a, 0x8c, 0xcf,
        0xa4, 0xca, 0x68, 0x12, 0x21, 0xce, 0x49, 0xfa, 0xcb, 0xeb, 0xc1, 0xa6, 0x02, 0x6f, 0x78, 0x1c, 0xcc, 0xd4, 0x07, 0xb8, 0xba, 0xb8, 0xd2, 0xc5, 0xb8, 0x99, 0x91, 0x1b, 0x4c, 0xca, 0xa2, 0xbc,
        0x38, 0x36, 0xed, 0x4a, 0x6c, 0x94, 0x13, 0x47, 0xa6, 0x0f, 0xac, 0x87, 0x75, 0x82, 0xf2, 0xc2, 0xdd, 0xb8, 0x5b, 0xe0, 0x9f, 0x08, 0xee, 0x31, 0x53, 0x9f, 0x07, 0xab, 0x6a, 0xe1, 0x52, 0xc4,
        0x8c, 0x13, 0xe7, 0x3b, 0xf9, 0xd0, 0xec, 0x9c, 0xee, 0xf7, 0x45, 0xfc, 0x76, 0x94, 0xa8, 0xa9, 0xf2, 0x40, 0xae, 0x36, 0xe4, 0x56, 0x43, 0x1f, 0xf2, 0x3f, 0x95, 0x32, 0x69, 0x3d, 0xf6, 0xd6,
        0xcb, 0x3e, 0x77, 0xcf, 0x01, 0x8f, 0xa2, 0x55, 0xed, 0x00, 0x73, 0x49, 0x24, 0x59, 0x8d, 0xb6, 0x91, 0x1c, 0xd0, 0x25, 0x83, 0xee, 0x7b, 0x1d, 0xce, 0x89, 0x0d, 0x6f, 0x96, 0xfe, 0xc6, 0xa9,
        0x1a, 0x06, 0xb1, 0x89, 0xa7, 0xf9, 0x21, 0x75, 0x00, 0xe6, 0x01, 0xc3, 0xc7, 0xe0, 0xd7, 0x5f, 0x65, 0x8b, 0x74, 0xbf, 0x23, 0xde, 0x56, 0x85, 0xd5, 0x61, 0x1a, 0x40, 0x64, 0xdb, 0xff, 0xac,
        0x6e, 0x87, 0x43, 0x72, 0xff, 0x35, 0xb4, 0x2c, 0xe4, 0x13, 0x81, 0x7f, 0x49, 0x84, 0xf9, 0xc4, 0x74, 0x62, 0xfa, 0x3b, 0xa6, 0xf9, 0x7c, 0xf4, 0xd7, 0x0e, 0xfe, 0x59, 0xc4, 0x49, 0xd1, 0x34,
        0x44, 0x92, 0xbf, 0x13, 0x76, 0xcc, 0xac, 0x98, 0x32, 0x33, 0x2e, 0x80, 0x90, 0x99, 0x51, 0x7f, 0x0f, 0xfe, 0x2a, 0xe4, 0x88, 0xc9, 0x7a, 0xa8, 0xcc, 0x0a, 0xdf, 0x04, 0x0d, 0xb4, 0x5c, 0x6c,
        0xc2, 0xac, 0x80, 0x18, 0xad, 0x4a, 0xc0, 0x83, 0x47, 0x4a, 0x16, 0x9f, 0x03, 0xc5, 0x2c, 0xf3, 0x63, 0x22, 0xae, 0x2c, 0xd5, 0x48, 0x87, 0x02, 0x77, 0x2b, 0x7a, 0xd7, 0xca, 0xfc, 0xa6, 0x90,
        0xed, 0x90, 0x12, 0xa9, 0x25, 0x86, 0x92, 0x93, 0x39, 0x05, 0xb4, 0x6a, 0x2a, 0x13, 0xe4, 0x84, 0x71, 0x24, 0xe7, 0x23, 0x5e, 0x2f, 0x66, 0x70, 0xf8, 0xc4, 0x58, 0x68, 0x36, 0xfa, 0x17, 0x2d,
        0x9f, 0x53, 0x34, 0x05, 0x12, 0xa8, 0x48, 0x0c, 0x06, 0xf4, 0x46, 0x3c, 0xea, 0x2f, 0xe6, 0x18, 0xe9, 0xf6, 0x26, 0xf5, 0xf5, 0xa2, 0xf5, 0x78, 0x57, 0x65, 0x02, 0xdf, 0x03, 0x3c, 0x40, 0xc4,
        0x91, 0x11, 0x13, 0xf8, 0x1e, 0xe6, 0xb5, 0x8c, 0x4c, 0x75, 0x14, 0xdc, 0x48, 0xf8, 0xbb, 0x8d, 0xcd, 0x62, 0x49, 0x0a, 0xd2, 0xa4, 0x0a, 0xec, 0xfc, 0x44, 0x99, 0xbc, 0xa6, 0x70, 0xa8, 0x08,
        0xf1, 0xe7, 0x38, 0x26, 0x64, 0x31, 0xc6, 0xf9, 0xc6, 0xe0, 0xfd, 0x84, 0x31, 0x33, 0x4f, 0xee, 0x3c, 0xa6, 0xb1, 0x7b, 0xc1, 0xde, 0xf1, 0x5a, 0xe4, 0x34, 0x24, 0xc5, 0xc8, 0x5b, 0xfd, 0x29,
        0xc0, 0x68, 0x52, 0xb9, 0xa1, 0x80, 0x74, 0x02, 0x0e, 0x99, 0x59, 0x2c, 0xd1, 0xfa, 0x17, 0xd1, 0x42, 0x8b, 0xab, 0x2b, 0x07, 0xbf, 0x75, 0xee, 0x19, 0x9d, 0xfe, 0xeb, 0x5e, 0x98, 0x1e, 0x81,
        0x26, 0xc7, 0x57, 0x47, 0x58, 0xbc, 0x44, 0xd1, 0xb4, 0xcd, 0x17, 0x3c, 0xc2, 0xca, 0xf7, 0x0c, 0xca, 0x8e, 0x4e, 0x05, 0xd6, 0x15, 0xb6, 0x7d, 0xee, 0xa5, 0xa0, 0x70, 0x23, 0x35, 0x8b, 0x66,
        0xe9, 0xb5, 0x80, 0xb3, 0x25, 0x69, 0x59, 0x6c, 0x09, 0x74, 0xe7, 0x88, 0xc8, 0x94, 0xc4, 0x55, 0x88, 0xa8, 0xde, 0xc5, 0x99, 0xa0, 0xc1, 0x10, 0x75, 0x34, 0xc9, 0xa6, 0xc1, 0xec, 0xc2, 0xcf,
        0x4b, 0x79, 0xed, 0x29, 0x2d, 0x1c, 0x39, 0xf7, 0x5e, 0x99, 0x80, 0x48, 0x52, 0x8b, 0x7d, 0x3a, 0x64, 0xb0, 0xfa, 0x0c, 0xfc, 0x0e, 0xc6, 0xaa, 0xcf, 0x2f, 0x9c, 0x9a, 0xc0, 0x60, 0x66, 0xe6,
        0x32, 0x6d, 0xe2, 0xb5, 0x00, 0x60, 0x1c, 0x44, 0x29, 0x80, 0x25, 0x97, 0x09, 0x89, 0xe3, 0xa2, 0xc8, 0x86, 0x0f, 0xcd, 0x80, 0xf0, 0xec, 0x30, 0xee, 0x3c, 0x53, 0x1f, 0x97, 0x32, 0xd6, 0x41,
        0xdc, 0xc7, 0x05, 0xa9, 0x56, 0x6e, 0x47, 0x23, 0xf2, 0xc2, 0x2f, 0x28, 0xb3, 0x56, 0x7d, 0xc0, 0x4e, 0xf8, 0x47, 0x96, 0x32, 0x9b, 0x19, 0xa4, 0x68, 0x82, 0xf2, 0x71, 0x0b, 0x56, 0xaf, 0xae,
        0x70, 0x93, 0xf0, 0xf3, 0xf2, 0x51, 0xab, 0x64, 0x5b, 0x0c, 0x66, 0x3f, 0x49, 0xf6, 0xec, 0xe8, 0x95, 0x75, 0x69, 0x5d, 0x51, 0xe4, 0xaf, 0xa0, 0x32, 0x16, 0x76, 0x31, 0x2d, 0xbf, 0x54, 0x1a,
        0xbb, 0xd9, 0x84, 0xd1, 0x5a, 0x1d, 0x47, 0x30, 0xb5, 0x53, 0xf9, 0x85, 0xfd, 0x93, 0xdd, 0x7c, 0xc9, 0x23, 0x91, 0x5d, 0x70, 0x9b, 0x85, 0xc2, 0xb3, 0x94, 0x52, 0x26, 0xf8, 0x6d, 0x11, 0x01,
        0x3a, 0xde, 0xd1, 0x2a, 0xa2, 0x5f, 0x0e, 0x83, 0x41, 0x88, 0x2f, 0xf8, 0x4b, 0xa8, 0x9b, 0x0c, 0xc5, 0x0f, 0xea, 0x0b, 0xf2, 0x90, 0xf5, 0x72, 0x4a, 0xd7, 0x36, 0x27, 0xfb, 0x2e, 0x95, 0x3e,
        0x76, 0x3b, 0x16, 0x4a, 0x56, 0x94, 0x9f, 0x91, 0x71, 0x08, 0x06, 0x66, 0xb2, 0x7d, 0x9a, 0x38, 0xb7, 0xff, 0xb4, 0x6c, 0xf0, 0x07, 0xc7, 0x47, 0xad, 0x52, 0x2c, 0x10, 0x35, 0x12, 0x66, 0x7f,
        0x09, 0x2d, 0x39, 0x19, 0x60, 0xe5, 0x76, 0x9a, 0xd9, 0x4c, 0xa5, 0xcb, 0x59, 0x73, 0x3e, 0x3b, 0x92, 0x00, 0x73, 0x7b, 0x0a, 0x34, 0x57, 0x83, 0x4c, 0xe7, 0xb4, 0x9d, 0xac, 0x49, 0x39, 0x0d,
        0x29, 0xa4, 0xf1, 0xab, 0xdb, 0x22, 0xc5, 0x2b, 0xbd, 0xb6, 0x36, 0x2c, 0x0d, 0x10, 0x92, 0xe6, 0xbd, 0x86, 0x6e, 0x5d, 0x37, 0x1d, 0x56, 0x3e, 0xcc, 0x46, 0xb2, 0xe5, 0x72, 0x4b, 0x89, 0x74,
        0x59, 0xa8, 0x45, 0x42, 0xf9, 0x46, 0xf0, 0x68, 0x83, 0xb6, 0x73, 0x16, 0x3a, 0xe8, 0x59, 0x58, 0x30, 0x04, 0x54, 0xde, 0xa2, 0xf1, 0xba, 0x0c, 0xfe, 0xc7, 0x4c, 0xcf, 0x91, 0xc9, 0x94, 0x44,
        0xa5, 0x05, 0x69, 0xc6, 0x9e, 0xc9, 0xc1, 0x5b, 0xa2, 0xac, 0x14, 0xd6, 0x31, 0x71, 0x27, 0x49, 0x22, 0xc5, 0x38, 0x6b, 0xf3, 0x32, 0x36, 0xb7, 0x4b, 0x2d, 0xf3, 0xff, 0xfe, 0x9f, 0x6b, 0xb4,
        0x42, 0xeb, 0x14, 0xb3, 0x4a, 0xc3, 0x07, 0x81, 0x4e, 0x77, 0x58, 0x65, 0xf4, 0x51, 0xe0, 0xf7, 0x3a, 0x9c, 0xff, 0x36, 0xac, 0x04, 0xb3, 0x19, 0x06, 0xf8, 0x80, 0x2a, 0xa6, 0xf4, 0x0b, 0x04,
        0x9d, 0x00, 0xcc, 0x05, 0x2a, 0x7f, 0x1c, 0xd8, 0xe3, 0xe2, 0x48, 0xaa, 0xcd, 0xd9, 0x31, 0xe8, 0x87, 0x73, 0x49, 0x79, 0xd8, 0x11, 0x21, 0x1b, 0xdc, 0x44, 0xa0, 0xa9, 0xa2, 0xa0, 0xae, 0x63,
        0x2f, 0x1f, 0x9e, 0x4b, 0x03, 0xb0, 0xec, 0x96, 0xa0, 0x08, 0x61, 0xc2, 0x9f, 0x37, 0xfb, 0x1f, 0xd1, 0x1a, 0x7d, 0xec, 0xc4, 0xa6, 0x96, 0x0f, 0x11, 0x22, 0x4c, 0x0f, 0xd6, 0x94, 0x34, 0xe4,
        0xce, 0x28, 0x69, 0x9a, 0x7a, 0x1e, 0x07, 0xf1, 0xe7, 0xd3, 0x94, 0x44, 0x4c, 0xd2, 0x01, 0x30, 0xf7, 0x2d, 0xf0, 0x47, 0xd7, 0xfe, 0x64, 0x60, 0x43, 0xf3, 0x36, 0x7a, 0xfb, 0xed, 0x4c, 0xc1,
        0x82, 0xc8, 0x0b, 0xd0, 0x40, 0x1e, 0x98, 0x70, 0xd8, 0xbf, 0x05, 0x7f, 0x3b, 0x2d, 0x0d, 0xc1, 0x67, 0xa9, 0x90, 0xb6, 0x77, 0xfe, 0x25, 0x3f, 0xb4, 0xef, 0xad, 0x25, 0x8f, 0xe2, 0x81, 0x03,
        0x2e, 0xe2, 0x14, 0x64, 0x97, 0xf3, 0x81, 0x02, 0x1d, 0x04, 0xd1, 0xcb, 0xe8, 0xd7, 0x6a, 0x68, 0x54, 0x06, 0xe6, 0xfc, 0xe9, 0xc2, 0x4e, 0xa8, 0x8e, 0x48, 0x43, 0x35, 0x40, 0x94, 0xdf, 0xa7,
        0x45, 0x6f, 0x94, 0x2a, 0x9a, 0x33, 0x40, 0x8d, 0x41, 0x0f, 0x60, 0x15, 0xc7, 0xb9, 0x3e, 0x2e, 0x38, 0xdf, 0xad, 0x3e, 0x43, 0x05, 0x8f, 0xdd, 0x8c, 0x59, 0x1a, 0xbb, 0xfd, 0x06, 0xfd, 0x59,
        0x94, 0xe5, 0x2c, 0xef, 0xec, 0xe1, 0x26, 0x33, 0xf9, 0x59, 0xce, 0x87, 0x54, 0x42, 0x1a, 0xcc, 0x71, 0x99, 0xef, 0x8b, 0xc1, 0xc5, 0xaf, 0xe7, 0x26, 0x2f, 0xa8, 0x65, 0xee, 0x9f, 0x73, 0x85,
        0xac, 0x8c, 0xa5, 0xf8, 0xec, 0xbe, 0xf0, 0xf2, 0xac, 0x42, 0x9c, 0x59, 0x67, 0x94, 0xc8, 0x23, 0x93, 0x97, 0xf5, 0xdf, 0x4b, 0xbd, 0x39, 0x20, 0xa0, 0xfa, 0x19, 0x25, 0x54, 0xb3, 0xc6, 0x0a,
        0xf5, 0x0f, 0x77, 0x71, 0x84, 0x8f, 0xa9, 0x2f, 0x8a, 0x5b, 0xbd, 0xb4, 0x09, 0xad, 0x79, 0x3f, 0x97, 0xd0, 0xe2, 0x70, 0x3c, 0x98, 0x99, 0x6e, 0xb1, 0xb7, 0xff, 0x93, 0x7f, 0xc5, 0x8f, 0xa5,
        0x0b, 0x77, 0x3b, 0xd9, 0x36, 0x8e, 0x51, 0xc4, 0x4a, 0xd2, 0x52, 0xaf, 0x4e, 0x7f, 0xab, 0xbb, 0x8e, 0x4d, 0x05, 0xb0, 0x06, 0x29, 0x32, 0xb0, 0x04, 0x1c, 0xb6, 0xfd, 0xbb, 0x70, 0xf7, 0x70,
        0xf0, 0xc1, 0xb4, 0x68, 0xc0, 0x05, 0xba, 0x30, 0xcb, 0x38, 0x9b, 0x56, 0x6a, 0x6f, 0x0e, 0xdd, 0x8a, 0x70, 0x2f, 0x1e, 0x08, 0xd9, 0xf0, 0x02, 0x6a, 0x10, 0x1b, 0x12, 0xd7, 0x56, 0x87, 0x9c,
        0xf5, 0x3e, 0x0c, 0x97, 0x70, 0xf2, 0x00, 0x39, 0x72, 0x73, 0xe9, 0x5e, 0x7c, 0x7e, 0x7e, 0xa7, 0x9d, 0x62, 0xb5, 0x60, 0x6d, 0x1f, 0xa6, 0xd4, 0xad, 0xf3, 0x9d, 0x3b, 0x2b, 0xa1, 0x10, 0x13,
        0x4e, 0xf0, 0x3b, 0x2f, 0x23, 0xfe, 0x53, 0x95, 0xc2, 0xa7, 0x59, 0x7b, 0x10, 0x06, 0x76, 0x39, 0x29, 0xee, 0x16, 0x29, 0xd0, 0x3b, 0x38, 0x1f, 0x9c, 0x48, 0x85, 0xa8, 0x7e, 0x6d, 0xbf, 0x11,
        0x80, 0x84, 0x35, 0xf1, 0x23, 0xdf, 0x17, 0x8e, 0xda, 0x38, 0xe1, 0xb5, 0xa8, 0x6d, 0x4e, 0xbc, 0x6a, 0xdd, 0x38, 0x5b, 0x20, 0xfe, 0xb5, 0x3e, 0x5d, 0xb7, 0x56, 0x3d, 0x97, 0x2f, 0xf6, 0xf6,
        0xf3, 0xe0, 0xdc, 0xe7, 0x0f, 0xbb, 0x06, 0x08, 0xc2, 0x8a, 0xbd, 0xc8, 0xc9, 0x3a, 0xe9, 0x20, 0x44, 0x83, 0xb6, 0x7c, 0x87, 0x3c, 0xa7, 0xff, 0x60, 0x75, 0xb3, 0xd3, 0x20, 0x4a, 0x09, 0xb1,
        0x5e, 0xa0, 0x39, 0x98, 0x8e, 0xda, 0xd8, 0xe1, 0xdf, 0x24, 0x3c, 0x32, 0x4e, 0x09, 0x7f, 0xdd, 0x0a, 0xb9, 0x68, 0xaa, 0x2b, 0x66, 0x82, 0x7a, 0xc7, 0xf0, 0xaf, 0xfd, 0xf2, 0x92, 0x6c, 0x8d,
        0xa3, 0x33, 0xa6, 0x01, 0xd7, 0x1c, 0xd4, 0x87, 0x93, 0x03, 0xc5, 0x87, 0xfc, 0x2e, 0x80, 0xb0, 0xab, 0x61, 0x62, 0x4b, 0x2e, 0x07, 0x66, 0xb1, 0xa3, 0x5f, 0x78, 0xe4, 0x46, 0x29, 0xc8, 0xda,
        0x08, 0xc2, 0xa1, 0xcd, 0xa4, 0xa1, 0x5f, 0x2f, 0x2e, 0x0b, 0x61, 0x7c, 0x9f, 0x99, 0x80, 0x50, 0x89, 0xc0, 0x50, 0x2f, 0xe3, 0xe9, 0xe2, 0xa1, 0xcb, 0xdb, 0x79, 0x06, 0xb4, 0x9a, 0x57, 0x56,
        0x12, 0xc9, 0x2f, 0x64, 0x4d, 0x9c, 0xa9, 0xe0, 0x1d, 0x72, 0xd2, 0x11, 0x7c, 0xaa, 0x92, 0x52, 0x6b, 0xf1, 0xe6, 0xb5, 0xe8, 0xf6, 0x3f, 0x14, 0xa9, 0xf8, 0x34, 0x04, 0x50, 0xc4, 0x62, 0xed,
        0x12, 0x0e, 0xb7, 0x92, 0x5f, 0xa4, 0x79, 0xe2, 0x84, 0x47, 0xf0, 0xb8, 0x5c, 0x70, 0xef, 0x6b, 0xd6, 0x90, 0xce, 0x93, 0xd3, 0xe3, 0xff, 0x86, 0x51, 0x83, 0xc7, 0xc8, 0x53, 0xb6, 0x7a, 0xf7,
        0x6a, 0x2a, 0x22, 0x9d, 0x7a, 0x84, 0x6a, 0xf1, 0x7f, 0x1c, 0x1a, 0xa7, 0x81, 0xb2, 0x63, 0x71, 0x14, 0x80, 0x29, 0x3c, 0x45, 0xc3, 0x02, 0x4d, 0x07, 0xb0, 0xe5, 0xae, 0xd8, 0x79, 0x11, 0xd2,
        0x0a, 0x44, 0xd3, 0x8b, 0x05, 0x10, 0xb2, 0x09, 0x20, 0xaf, 0x25, 0x49, 0x9f, 0xfa, 0x23, 0xd4, 0xbf, 0x22, 0x04, 0xb3, 0x4e, 0x32, 0xa8, 0x19, 0x3c, 0xf5, 0x33, 0xca, 0x68, 0x63, 0x72, 0x60,
        0xb0, 0xe1, 0xf1, 0x02, 0x1f, 0xc3, 0xfe, 0xd8, 0x81, 0xab, 0x67, 0x95, 0x25, 0x18, 0x4d, 0x08, 0x8f, 0x50, 0x59, 0x65, 0xb9, 0xf9, 0x77, 0xad, 0x2f, 0x04, 0x70, 0xe8, 0x1c, 0x62, 0x87, 0x0d,
        0x2d, 0x2e, 0xaa, 0x59, 0x71, 0x4e, 0x26, 0xed, 0x57, 0xea, 0x10, 0xe7, 0x92, 0x32, 0x34, 0x44, 0x28, 0xff, 0x86, 0x9b, 0xbb, 0xc1, 0x90, 0x36, 0x58, 0x78, 0xdb, 0xee, 0xf9, 0x2f, 0xb5, 0x40,
        0x90, 0xd9, 0x0a, 0x66, 0xc3, 0x5a, 0xd6, 0x41, 0x26, 0x2e, 0x26, 0xec, 0x7d, 0xca, 0x17, 0x23, 0xb4, 0x58, 0x69, 0xa5, 0x79, 0x38, 0xbd, 0x4c, 0x19, 0x9e, 0x40, 0xf6, 0x2c, 0x5c, 0x51, 0x3a,
        0x31, 0xb2, 0x9e, 0x81, 0x47, 0x8a, 0x55, 0x52, 0x2d, 0x2d, 0xdd, 0x78, 0x95, 0x12, 0x1a, 0x9a, 0x42, 0x17, 0xea, 0x06, 0x8d, 0x01, 0xdb, 0x62, 0xf0, 0x5a, 0xcb, 0xcc, 0x55, 0xf5, 0x63, 0xb1,
        0xca, 0x94, 0x56, 0x10, 0x0b, 0xad, 0xd9, 0xb1, 0x96, 0xfb, 0x57, 0xe2, 0x2d, 0x38, 0x6d, 0x4f, 0x8c, 0xad, 0x4d, 0x0d, 0x0a, 0x59, 0x8e, 0xb1, 0x0c, 0x7c, 0xf2, 0xc9, 0x0f, 0x3e, 0x63, 0x06,
        0xa9, 0xf2, 0xa6, 0xeb, 0x3d, 0x15, 0xf5, 0x92, 0x47, 0xcf, 0x29, 0xe5, 0x54, 0x83, 0x64, 0x6b, 0x2f, 0x2e, 0xfb, 0x29, 0x76, 0x57, 0x36, 0x26, 0x9d, 0xe9, 0xf3, 0x0b, 0xd2, 0x6a, 0x49, 0x91,
        0x39, 0x16, 0x4b, 0x18, 0x1b, 0xe2, 0xa0, 0x88, 0xba, 0x8e, 0xba, 0x8a, 0x20, 0x9d, 0xf4, 0x28, 0x01, 0x69, 0x09, 0x14, 0x37, 0x84, 0xc4, 0x83, 0xf2, 0x0f, 0xe3, 0xa3, 0x0d, 0x0f, 0xb0, 0x95,
        0xd6, 0xd5, 0x8f, 0x04, 0x5c, 0x79, 0x98, 0x73, 0x1c, 0x00, 0x87, 0x45, 0x17, 0x1e, 0xa6, 0xa2, 0xfb, 0x6e, 0xd7, 0x5e, 0xf5, 0x79, 0x8d, 0xfb, 0x5a, 0xb8, 0x07, 0x5b, 0x2a, 0x01, 0x3d, 0xa1,
        0x37, 0xc4, 0x8b, 0x65, 0x56, 0xba, 0xba, 0x2e, 0xe8, 0xdb, 0x83, 0x59, 0x9a, 0xb1, 0x44, 0xd5, 0x76, 0x66, 0xf7, 0x4e, 0x5b, 0x76, 0xf3, 0xa9, 0xb3, 0x0b, 0x0c, 0xd2, 0xaa, 0xfc, 0x76, 0x34,
        0x64, 0xac, 0xfe, 0x85, 0xfb, 0x8e, 0xd8, 0xc8, 0x84, 0x19, 0x55, 0x64, 0x36, 0x10, 0xd7, 0xe3, 0xbb, 0xd2, 0x66, 0x74, 0xd2, 0x79, 0x29, 0x95, 0x49, 0xea, 0x6a, 0x3a, 0xdb, 0x34, 0x2a, 0x19,
        0x16, 0x50, 0xe2, 0x54, 0x7f, 0xe3, 0x80, 0x54, 0x23, 0x14, 0x79, 0xac, 0x23, 0x83, 0x2c, 0x38, 0x9a, 0xa8, 0x46, 0x3f, 0xc1, 0x7f, 0xa5, 0x12, 0x3d, 0xfb, 0x6c, 0x38, 0x10, 0xc1, 0xe8, 0x92,
        0x8b, 0x98, 0x3b, 0x67, 0x43, 0x1a, 0xef, 0xc7, 0xd5, 0xef, 0xa6, 0x51, 0xee, 0x90, 0xb1, 0x80, 0x06, 0xbe, 0xc8, 0x92, 0xe1, 0x02, 0x64, 0xfc, 0x12, 0x19, 0x75, 0x44, 0x35, 0x7b, 0xbd, 0x58,
        0x51, 0x2e, 0x25, 0x96, 0x88, 0xa7, 0xdc, 0x74, 0x23, 0x3d, 0x9b, 0x61, 0xc4, 0x08, 0xcc, 0xfe, 0x6a, 0x8d, 0xb2, 0xbc, 0xd0, 0x3c, 0x9d, 0x69, 0xdc, 0x2d, 0x90, 0xa9, 0x79, 0xaf, 0xd9, 0x6d,
        0x23, 0x92, 0xc7, 0xa4, 0x9d, 0xf1, 0x7c, 0xf8, 0x16, 0x9e, 0x3a, 0xc8, 0x00, 0x23, 0xa6, 0xec, 0xa8, 0xa9, 0x46, 0x4a, 0x68, 0x9e, 0x4f, 0x12, 0x8f, 0x2a, 0xe3, 0xac, 0x05, 0x1b, 0xe7, 0xe3,
        0x31, 0xf4, 0xfb, 0x8c, 0x25, 0x24, 0x0e, 0x30, 0x67, 0x13, 0x77, 0x65, 0x4c, 0xf6, 0xfb, 0xd1, 0x1d, 0xa9, 0x56, 0x7e, 0x58, 0x7f, 0xb1, 0x26, 0xd9, 0x0b, 0x5f, 0x82, 0x82, 0xc6, 0x65, 0x38,
        0xfe, 0xba, 0x0e, 0xb9, 0x3c, 0xfa, 0x5d, 0x3b, 0xa9, 0x73, 0xf7, 0xad, 0x52, 0xbf, 0x51, 0x81, 0xb7, 0x15, 0x31, 0xa6, 0xfc, 0x6a, 0x49, 0x67, 0x8a, 0x7c, 0x8e, 0x57, 0x08, 0x5f, 0x47, 0xa1,
        0x26, 0x66, 0x7a, 0x44, 0xb3, 0xa5, 0xc5, 0x31, 0xb6, 0x78, 0x48, 0x33, 0xeb, 0xb7, 0x77, 0x5a, 0xcf, 0x1c, 0x87, 0x92, 0xf5, 0x40, 0x37, 0x76, 0xad, 0x49, 0xdf, 0x7c, 0x4a, 0x89, 0x77, 0xee,
        0x1f, 0x8e, 0x66, 0xde, 0xef, 0x19, 0x72, 0x0f, 0xab, 0x62, 0x95, 0x1f, 0xd8, 0x64, 0x32, 0x1d, 0x6a, 0xee, 0xdc, 0x4c, 0xef, 0x9a, 0xb8, 0xc4, 0x95, 0xd5, 0x10, 0x31, 0x53, 0x4c, 0xb8, 0x82,
        0xea, 0xcf, 0x4d, 0x88, 0x22, 0x59, 0x49, 0xd0, 0xe7, 0x3b, 0xcf, 0x4b, 0xc1, 0xf3, 0x78, 0x43, 0xb3, 0x3c, 0xfc, 0x52, 0xb3, 0x32, 0x8e, 0xa6, 0xf4, 0xcf, 0x5a, 0xa4, 0xc6, 0x04, 0xcb, 0x65,
        0x78, 0x68, 0xa6, 0x2c, 0x42, 0xca, 0x27, 0x37, 0x4f, 0x16, 0x8c, 0xa0, 0xae, 0xbe, 0x65, 0x98, 0x0e, 0x99, 0xa4, 0xac, 0xce, 0xab, 0x56, 0xcd, 0x2e, 0xa5, 0xb6, 0xc0, 0xcb, 0x2c, 0xee, 0xe6,
        0xc6, 0xab, 0xb7, 0x32, 0x72, 0x3c, 0x19, 0xe9, 0xea, 0x74, 0x21, 0xd3, 0xe3, 0x5f, 0x10, 0x53, 0xb8, 0x24, 0xec, 0x5a, 0x26, 0xd3, 0xb0, 0xd6, 0xb4, 0x75, 0x0f, 0x48, 0x78, 0xa6, 0x22, 0xb2,
        0xc3, 0xee, 0xec, 0x8f, 0xc5, 0xe8, 0x81, 0x96, 0xe4, 0xc7, 0xdb, 0x86, 0xad, 0x7f, 0x5e, 0x48, 0x28, 0xf6, 0x71, 0x99, 0x59, 0x72, 0x6b, 0x13, 0xd7, 0x9a, 0x49, 0x21, 0x50, 0x95, 0xf9, 0x55,
        0xb5, 0x84, 0xa4, 0x7c, 0x9f, 0x89, 0xd9, 0xf1, 0x3c, 0x7b, 0x35, 0xd0, 0x20, 0xd4, 0x24, 0x50, 0x3f, 0x74, 0x07, 0x7e, 0x8d, 0x3c, 0xca, 0xde, 0x96, 0xfd, 0x66, 0xdf, 0xd7, 0x8d, 0x4b, 0xee,
        0x5e, 0x71, 0xd3, 0xf2, 0xbc, 0x95, 0xdc, 0x50, 0xba, 0x56, 0x8d, 0x89, 0xb7, 0x2b, 0x2b, 0x1e, 0x3f, 0x2d, 0xfa, 0x2c, 0x06, 0x75, 0xe0, 0xa9, 0x03, 0xf0, 0x1f, 0xc2, 0xf1, 0xc6, 0x06, 0xfb,
        0x5f, 0x9b, 0x81, 0xb5, 0xcf, 0xcf, 0x91, 0x0e, 0x39, 0x87, 0xa7, 0xdc, 0x5c, 0x03, 0x2c, 0x9a, 0xe0, 0xf2, 0x0c, 0x33, 0x34, 0x3a, 0x1a, 0x3c, 0x39, 0x64, 0xb1, 0xd4, 0x04, 0x93, 0x2f, 0x88,
        0xdf, 0x25, 0xe1, 0x87, 0xb4, 0x8c, 0xa4, 0xde, 0x02, 0x8d, 0x7e, 0x92, 0x2f, 0xc3, 0xaa, 0x87, 0x07, 0x67, 0x94, 0x4e, 0xba, 0x2d, 0x85, 0x55, 0x14, 0x0b, 0x01, 0xd1, 0x76, 0x60, 0x5b, 0x7f,
        0x32, 0xda, 0x98, 0x2e, 0xc3, 0xb4, 0x36, 0xed, 0x4b, 0x51, 0x75, 0xe6, 0x0e, 0x95, 0xda, 0x49, 0x8c, 0x61, 0xfe, 0x87, 0xcd, 0x0e, 0x1e, 0x0f, 0x7c, 0x07, 0x1f, 0x03, 0xa8, 0xcd, 0xd3, 0x35,
        0x47, 0x81, 0x79, 0x9b, 0x19, 0x57, 0xd7, 0xe8, 0x30, 0x15, 0xe2, 0xe0, 0x72, 0x00, 0x0b, 0x3f, 0x6f, 0x84, 0x19, 0xb5, 0xa0, 0x40, 0x29, 0x62, 0xb0, 0x2e, 0x09, 0x2d, 0x84, 0xba, 0xcd, 0x47,
        0xe2, 0xcb, 0x2b, 0x4e, 0x72, 0xc4, 0x5e, 0x1d, 0xf3, 0xb0, 0xde, 0xb7, 0xee, 0xd2, 0x6d, 0x06, 0xd6, 0xce, 0xd6, 0x41, 0xc3, 0xdf, 0xfa, 0xb7, 0x87, 0xb5, 0xf1, 0xc7, 0xd8, 0x87, 0x26, 0xf8,
        0xc7, 0xbb, 0xdc, 0xf5, 0x7e, 0x42, 0x18, 0xb6, 0x9a, 0xd7, 0x31, 0x8b, 0x05, 0xfe, 0x23, 0x65, 0xa5, 0xaf, 0x2c, 0x94, 0xc1, 0xc6, 0x53, 0xa0, 0x1f, 0x90, 0xe9, 0xb9, 0x91, 0x36, 0x38, 0xc6,
        0xeb, 0x97, 0x84, 0xde, 0x80, 0x8f, 0xc9, 0xdb, 0xc7, 0x0f, 0xde, 0xdb, 0x55, 0x3a, 0xa7, 0x66, 0xf4, 0xec, 0x4e, 0x9a, 0xc6, 0xfe, 0x2c, 0xcb, 0x12, 0x44, 0xc1, 0xdc, 0xcd, 0x1e, 0x5b, 0x2a,
        0xdd, 0x08, 0x15, 0xb1, 0x1d, 0xa9, 0x12, 0xaf, 0xa7, 0x74, 0x5b, 0x1e, 0x99, 0xe6, 0x8a, 0x2b, 0x5e, 0x9e, 0x59, 0x12, 0x74, 0xb0, 0xe5, 0xa5, 0x09, 0x3d, 0xda, 0xcd, 0x05, 0xc7, 0x87, 0x36,
        0xfc, 0x27, 0xff, 0x2f, 0x18, 0xc0, 0xb2, 0x28, 0xe8, 0x49, 0xaf, 0x5a, 0xc0, 0x19, 0x94, 0xfd, 0x79, 0xf1, 0x11, 0x6b, 0x25, 0xed, 0xcf, 0x7e, 0x66, 0xc6, 0xd2, 0xc4, 0xd3, 0xa9, 0xce, 0x48,
        0xd0, 0xc7, 0x20, 0x43, 0x47, 0x56, 0xa5, 0xd8, 0xc1, 0xa4, 0xd4, 0xd7, 0x81, 0xd9, 0x79, 0x8a, 0xf9, 0x6b, 0xd9, 0x26, 0x91, 0x71, 0x73, 0x42, 0x41, 0x03, 0x21, 0xc5, 0x45, 0x16, 0xc3, 0xd4,
        0x99, 0x2f, 0x94, 0x7e, 0x04, 0xd3, 0x46, 0x0f, 0xa1, 0xed, 0x39, 0x78, 0x97, 0xd3, 0x16, 0x46, 0xa7, 0x76, 0x42, 0xf6, 0x8d, 0xb1, 0x31, 0x19, 0x19, 0xc7, 0xf2, 0xd2, 0x38, 0xa2, 0xec, 0x61,
        0x60, 0x9e, 0x2d, 0x95, 0x11, 0x79, 0xf4, 0x75, 0xb1, 0x8c, 0xbe, 0xb0, 0x84, 0x18, 0x64, 0x0e, 0x76, 0x52, 0x51, 0x15, 0x8e, 0x67, 0xf3, 0x34, 0x63, 0x8f, 0x12, 0xac, 0xf6, 0x0a, 0x86, 0x35,
        0x35, 0xfe, 0x60, 0x63, 0x92, 0x22, 0xd8, 0x81, 0x68, 0x4f, 0xcc, 0x33, 0x64, 0x80, 0x85, 0xd2, 0x63, 0x37, 0xea, 0xe5, 0x71, 0x47, 0xcf, 0x8d, 0xd0, 0xf4, 0xa5, 0x06, 0x62, 0xd0, 0x55, 0x1b,
        0x8b, 0x0b, 0xe3, 0x51, 0x9d, 0x7c, 0x98, 0x81, 0x97, 0x03, 0xab, 0xcf, 0x8c, 0xac, 0x0f, 0x12, 0x70, 0xc2, 0x4f, 0x21, 0xb9, 0xea, 0x6d, 0x6b, 0x41, 0xc7, 0x5a, 0x92, 0x7b, 0x4b, 0x28, 0x06,
        0x47, 0x90, 0x7a, 0x2e, 0x0a, 0x51, 0xfe, 0xc2, 0xf4, 0x1f, 0xfd, 0x7c, 0x41, 0x79, 0x9f, 0x08, 0x17, 0xf3, 0xc7, 0xa4, 0x8c, 0xdf, 0xa1, 0x83, 0x61, 0xc0, 0x5b, 0x25, 0x68, 0x0e, 0xf3, 0x4e,
        0xb3, 0xdf, 0x0a, 0xfe, 0x15, 0x2b, 0x1d, 0x34, 0x82, 0x7d, 0x26, 0xd3, 0x7b, 0xac, 0xac, 0xe5, 0x09, 0x20, 0x11, 0xb3, 0xfb, 0xfe, 0xfb, 0x7b, 0x8f, 0xba, 0xae, 0x75, 0x4a, 0x2a, 0xb9, 0x13,
        0x58, 0xd6, 0x29, 0x05, 0xd7, 0x4a, 0xfd, 0x74, 0xe9, 0xad, 0x34, 0x80, 0x2d, 0x16, 0x37, 0xfd, 0x56, 0xc7, 0x92, 0x0c, 0x59, 0xd6, 0x92, 0x41, 0x21, 0x8c, 0xef, 0x29, 0xa9, 0x2d, 0xbf, 0xe8,
        0x7d, 0x2c, 0x61, 0x59, 0xce, 0x6c, 0x9e, 0x18, 0x70, 0x57, 0x07, 0x92, 0x6e, 0x80, 0x61, 0xaa, 0x69, 0x14, 0xbc, 0x61, 0xab, 0xeb, 0x2e, 0xf7, 0x03, 0x8b, 0xf6, 0x07, 0x1f, 0x12, 0x3e, 0xc7,
        0x2b, 0xdc, 0x58, 0xda, 0x5e, 0xff, 0x7d, 0x7d, 0xee, 0x26, 0x76, 0x8c, 0x7c, 0x0b, 0xcf, 0x1b, 0xe6, 0x2d, 0xfd, 0x5e, 0x82, 0x13, 0x4e, 0x37, 0xde, 0x1f, 0x83, 0xb4, 0xf2, 0x2a, 0x28, 0xc9,
        0x93, 0x33, 0x77, 0x3d, 0x6b, 0xea, 0x63, 0xcd, 0x3e, 0x20, 0x67, 0xc8, 0xa0, 0x42, 0xc7, 0xb3, 0x06, 0xc4, 0xf3, 0xe6, 0x09, 0xe1, 0xa5, 0xa7, 0x19, 0x28, 0xf6, 0x81, 0x34, 0xa8, 0x87, 0x52,
        0xa1, 0x51, 0x09, 0x03, 0x3e, 0x7a, 0x70, 0x8d, 0x32, 0x83, 0x70, 0xff, 0x5f, 0x0a, 0x21, 0xaf, 0x05, 0xcf, 0x57, 0xf7, 0x25, 0x1a, 0x1d, 0x86, 0x9c, 0x8c, 0x73, 0xe8, 0x80, 0x6f, 0x67, 0xc7,
        0xb6, 0xd4, 0x99, 0x29, 0x41, 0x41, 0xf1, 0x6e, 0x8b, 0x56, 0x85, 0x36, 0x1a, 0xbf, 0x91, 0xbc, 0x74, 0xa7, 0xc2, 0xb5, 0xcc, 0xf9, 0xc0, 0x0a, 0x41, 0xc6, 0xdd, 0x3c, 0x16, 0x97, 0x82, 0x7a,
        0xf9, 0xba, 0xbb, 0xa8, 0xc9, 0x5c, 0x0a, 0xda, 0xae, 0x51, 0x43, 0x61, 0x67, 0x77, 0x98, 0x73, 0x40, 0xde, 0x37, 0x09, 0xc2, 0x96, 0x91, 0x00, 0x83, 0x73, 0x03, 0x6c, 0x07, 0x2b, 0x67, 0x48,
        0x49, 0x3c, 0x0e, 0x72, 0x2e, 0x34, 0xda, 0xc9, 0xe6, 0xbb, 0x04, 0xc4, 0x3f, 0x6b, 0xd5, 0xbf, 0xd0, 0xb4, 0x6e, 0xde, 0xfa, 0xd7, 0x6f, 0xc3, 0xe9, 0x2d, 0x60, 0x51, 0x7f, 0xdf, 0x80, 0x49,
        0x27, 0x86, 0xd8, 0xf5, 0xe8, 0xe7, 0x26, 0xa8, 0x05, 0x21, 0x33, 0xd3, 0x64, 0x75, 0x26, 0xb1, 0xfb, 0x55, 0x6e, 0x63, 0x4b, 0xfc, 0xa2, 0xca, 0xa4, 0xb2, 0xcf, 0xf5, 0xc9, 0xe7, 0x3b, 0x8b,
        0x18, 0x57, 0xd1, 0xff, 0x46, 0xf2, 0xed, 0xcc, 0x56, 0xda, 0x41, 0xf1, 0x59, 0xae, 0x9e, 0xb7, 0x87, 0xfe, 0x9c, 0xe6, 0x6f, 0x17, 0x63, 0x82, 0xb4, 0x4e, 0x14, 0xd8, 0x7c, 0x86, 0x29, 0xfd,
        0xee, 0xcf, 0x56, 0xef, 0xf3, 0x00, 0xed, 0xad, 0x6a, 0xc9, 0x1a, 0xee, 0x47, 0xb1, 0xc5, 0x62, 0x48, 0x2e, 0x27, 0x15, 0x04, 0x4d, 0x51, 0xee, 0x54, 0xbd, 0x4d, 0xa8, 0x00, 0x21, 0x39, 0x8d
    };
    const char* expected_output = "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";

    size_t encoded_length = 5464; // ceil(4096/3)*4
    unsigned char* encoded = new unsigned char[encoded_length];
    size_t encoded_bytes = base64_encode(input, sizeof(input), encoded, encoded_length);
    REQUIRE(encoded_bytes == strlen(expected_output));
    REQUIRE(std::string_view((const char*)encoded, encoded_bytes) == expected_output);

    size_t decoded_length = sizeof(input) + 2; // +2 because the encoded output was padded and so we need an extra 2 bytes even though we won't fill them
    unsigned char* decoded = new unsigned char[decoded_length];
    size_t decoded_bytes = base64_decode(encoded, encoded_bytes, decoded, decoded_length);
    REQUIRE(decoded_bytes == sizeof(input));
    REQUIRE(std::vector(&decoded[0], &decoded[decoded_bytes]) == std::vector(&input[0], &input[sizeof(input)]));

    delete[] encoded;
    delete[] decoded;
}

TEST_CASE("Decode fails when given a 'base64' string with invalid characters")
{
    // TODO: This test passes if we use characters like pipe that are off the end of the
    //       ASCII valid-base64 range, but will fail for characters like # that are in the
    //       middle but not used.
    const char* encoded = "q80|"; // 'q80=' is '0xABCD'
    unsigned char decoded[32] = {};
    size_t decoded_bytes = base64_decode((const unsigned char*)encoded, strlen(encoded), decoded, sizeof(decoded));
    REQUIRE(decoded_bytes == 0);
}

TEST_CASE("Decode fails when given a 'base64' string with an invalid length")
{
    const char* encoded = "q80=="; // 'q80=' is '0xABCD'
    unsigned char decoded[32] = {};
    size_t decoded_bytes = base64_decode((const unsigned char*)encoded, strlen(encoded), decoded, sizeof(decoded));
    REQUIRE(decoded_bytes == 0);
}

TEST_CASE("Decode fails output buffer is too small")
{
    const char* encoded = "8fLz9A=="; // '8fLz9A== is 0xF1F2F3F4 (4 bytes)
    unsigned char decoded[3] = {};
    size_t decoded_bytes = base64_decode((const unsigned char*)encoded, strlen(encoded), decoded, sizeof(decoded));
    REQUIRE(decoded_bytes == 0);
}

// TODO: Tests for:
// - Successfully decode unpadded input (IE missing the trailing ==s)
